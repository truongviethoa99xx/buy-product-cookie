$(function() {
    dataTable();
    loadCart();
    totalCart();

    $('#select_category').change(function() {
        let id = $(this).find(':selected').val();
        productByCate(id);
    });
    $(".qty").keypress(function(event) {
        return isNumber(event.keyCode);
    });
        
    $('.qty').blur(function(event){ 
        let parent = $(this).parents("tr");
        let price = parseFloat(parent.find('.price').text());
        let price_orginal = parseFloat(parent.find('.price_orginal').text());
        let qty = parseFloat(parent.find('.qty').val());
        let discount = parseFloat(parent.find('.discount').text());
        let unit = parent.find('.unit option:selected').val();
        let conversion_value = parseFloat(parent.find('.hidden').data('conversion_value'));
        let inventor = parseFloat(parent.find('.inventor').text());
        let price_whole = parseFloat(parent.find('.hidden').data('price_whole'));
        let quantity_whole = parseFloat(parent.find('.hidden').data('quantity_whole'));
        if(unit == 'conversion_unit'){
            if(qty > inventor*conversion_value){
                message("Cảnh báo unit!", "Số lượng không đủ", "error");
            }else{

                if(qty >= quantity_whole){
                    var dis = (price_orginal*100)/price_whole;
                }else{
                    var dis = parent.find('.discount').data('discount');
                }
                var new_price = price_orginal-(price_orginal*dis/100);
                parent.find('.da_giam').text(new_price)
                let total = totalRetail(new_price, qty);
                parent.find('.total').text(total);
                parent.find('.discount').text(dis);

                
            }
        }else{
            if(qty > inventor){
                message("Cảnh báo!", "Số lượng không đủ", "error");
            }else{
                let total = totalWholesale(price, qty);
                parent.find('.total').text(total);
            }
        }

        
        totalCart();
        return isNumber(event.keyCode);
    });

    $('.unit').change(function(){
        let parent = $(this).parents("tr");
        let unit = parent.find(this).find(':selected').val();
        let price = parseFloat(parent.find('.price').text());
        let price_orginal = parseFloat(parent.find('.price_orginal').text());
        let inventor = parseFloat(parent.find('.inventor').text());
        let conversion_value = parseFloat(parent.find('.hidden').data('conversion_value'));
        let qty = parseFloat(parent.find('.qty').val());
        let discount = parseFloat(parent.find('.discount').text());
        if(unit == 'conversion_unit'){
            
            parent.find('.price_orginal').text(price_orginal/conversion_value);
            parent.find('.price').text(price_orginal/conversion_value - price_orginal/conversion_value*discount/100);
           
           
            var total =  price*qty;
            parent.find('.total').text(total);
            parent.find('.inventor').text(inventor*conversion_value);
        }else {
            
            parent.find('.price_orginal').text(price_orginal*conversion_value);
            parent.find('.price').text(price_orginal*conversion_value - price_orginal*conversion_value*discount/100);
 
            var total =  price*qty;
            parent.find('.total').text(total);
            parent.find('.inventor').text(inventor*conversion_value);
        }
        totalCart();
    });
});
function deleteCart(r){
    $('#cart').DataTable().row( $(r).parents('tr') ).remove().draw();
    totalCart();
}

function totalCart() {
    let sum = 0;
    $(".total").each(function (key, value) {
        sum += parseFloat($(this).text());
    });
    $(".totalCart").text(sum);
}
    
function loadCart(){
    let cookie = $.cookie('product');
    if(cookie === undefined){
        cookie = null
    }else{
        cookie = $.cookie('product');
    }
    return $.parseJSON(cookie);
}

async function dataTable() {
    return await $("#cart").DataTable({
        data: loadCart(),
        columns: [
            { data: "name" },
            { data: "unit", visible: false },
            { data: "conversion_unit", visible: false },
            {
                data: null,
                render: function (data) {
                    return `
                        <select class="unit">
                            <option value="unit">${data["unit"]}</option>
                            <option value="conversion_unit">${data["conversion_unit"]}</option>
                        </select>
                    `;
                },
            },
            { data: "conversion_value", visible: false },
            { data: "quantity_whole", visible: false },
            { data: "price_whole" , visible: false},
            
            { data: "inventor",
                render: function (data, type, row, meta) {
                    return `<input data-quatity_whole="${row['quantity_whole']}" data-price-whole="${row['price_whole']}" data-price_whole="${row['price_whole']}" data-quantity_whole="${row["quantity_whole"]}" data-conversion_value="${row["conversion_value"]}" class="hidden" type="hidden" /><p class="inventor" >${data}</p>`;
                }
             },
            { data: "price_orginal",
                render: function (data) {
                    return `<p class="price_orginal">${data}</p>`;
                } 
            },
            { data: null,  
                render: function (data) {
                    return `<p class="discount" data-discount="">${discount(data['price'], data['price_orginal'])}</p>`;
                }
            },
            { data: "price" ,
                render: function (data) {
                    return `<p class="price">${data}</p>`;
                }
            },
            {
                data: "qty",
                render: function (data) {
                    return `<input class="qty" value="${data}"/>`;
                },
            },
            {
                data: null,
                render: function (data) {
                    return `<span class="total">${data['price']* data['qty']}</span>`;
                },
            },
            {
                data: null,
                render: function (data) {
                    return `<button onClick="deleteCart($(this))" class="btn-primary btn-sm">Xóa</buttob>`;
                },
            },
        ],
        bDestroy: true,
        pageLength: 5,

        language: {
            processing: "Loading",
            search: "Tìm kiếm",
            lengthMenu: "Hiển thị _MENU_ ",
            info: "Bản ghi từ _START_ đến _END_ Tổng cộng _TOTAL_ bản ghi",
            infoEmpty: "Khi không có dữ liệu, Hiển thị 0 bản ghi trong 0 tổng cộng 0 ",

            zeroRecords: "Không tìm thấy",
            emptyTable: "Không có dữ liệu",
            paginate: {
                first: "Trang đầu",
                previous: "Trang trước",
                next: "Trang sau",
                last: "Trang cuối",
            },
        },
    });
}

// Function xài chung
function message(title,value, type) {
    toast({
        title: `${title}`,
        message: `${value}`,
        type: `${type}`,
        duration: 4000,
    });
}


// check number
function isNumber(n) {
    return /\d/.test(String.fromCharCode(n));
}
// max
function maxMin() {
    var max = $('.inventor').text();
    console.log(max);
    // var num = +number, max = 100, min = 0;
    // number = isNaN(num) ? min : num > max ? max : num < min ? min : num;
    return max;
}  
maxMin();

// Add comma to number
function addCommas(num) {
    var str = num.toString().split('.');
    if (str[0].length >= 4) {
        str[0] = str[0].replace(/(\d)(?=(\d{3})+$)/g, '$1,');
    }
    return str.join('.');
}
function discount(gia,giagoc){
    num = 100-(gia/giagoc*100);
    return num.toFixed(0);
}